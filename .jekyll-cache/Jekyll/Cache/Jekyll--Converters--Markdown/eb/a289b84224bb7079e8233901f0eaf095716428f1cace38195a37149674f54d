I"a<p>전세계적으로 Java의 Spring, Nodejs의 express, Python의 Django 등 수많은 웹 프레임워크가 존재한다. 이번 포스팅에선 현재 한국의 수많은 기업에서 사용중인 자바 웹 프레임워크 ‘Spring’에 대해 알아보고자 한다.</p>

<hr />

<h2 id="spring-등장-배경">Spring 등장 배경</h2>
<h4 id="j2ee와-ejb">J2EE와 EJB</h4>
<p>자바 언어가 등장한 이래로 자바 기술로 기업환경의 어플리케이션을 만들기 위한 노력은 지속되어왔고, 썬마이크로시스템즈(자바 개발사)는 이를 위한 스펙들을 모아놓은 스펙 집합 J2EE(Java to Enterprise Edition)를 만들었다. J2EE의 대표적인 기술은 JSP, SERVLET, EJB, JDBC, JNDI 등이 있으며, 이중 기업환경의 시스템을 구현하기 위한 서버 측 컴포넌트 모델이자 규약으로 자바를 사용하여 서버 앱을 만드는 EJB(Enterprise Java Beans)는 표준 스펙으로 자리매김했다.</p>

<p><img src="./assets/img/posts/20220621/EJB-Structure.png" alt="EJB" title="EJB" /></p>
<div style="color: gray; text-align: center;">EJB Structure</div>

<p>하지만 J2EE와 EJB는 여러가지 문제점이 존재했으며, 우선 비지니스 로직과 기술적인 복잡함을 제대로 분리해내지 못했다. 또한 컨테이너 안에서만 동작하는 객체 구조나, 특정 환경에 종속적인 코드들로 오히려 개발의 복잡함이 가중되었으며, 가장 치명적인 단점은 EJB 틀 안에서 자바코드 스타일을 강제함으로써 상속을 제한하거나 다형성 적용을 근본적으로 제한하는 등 자바 언어의 철학이자 핵심인 객체지향적인 프로그래밍을 퇴색시켰다.</p>

<h4 id="spring의-등장">Spring의 등장</h4>
<p>EJB에 대한 반발로 자바 진형에서는 다양한 오픈소스가 쏟아져나왔고 2002년 로드존슨은 EJB의 문제점을 지적하며 EJB를 사용하지 않고도 고품질의 확장가능한 앱을 개발할 수 있음을 입증하는 책을 출판한다.</p>

<p><img src="./assets/img/posts/20220621/Rod-Johnson-J2EE-expert-dev.jpg" alt="로드존슨의 J2EE 설계와 개발(expert one-on-one)" title="로드존슨의 J2EE 설계와 개발(expert one-on-one)" /></p>
<div style="color: gray; text-align: center;">로드존슨의 J2EE 설계와 개발(expert one-on-one)</div>

<p>책에는 30,000라인의 예제 소스코드와 현재 스프링의 핵심 개념과 기반 코드인 BeanFactory, ApplicationContext, POJO, IoC, DI 등이 포함되어 있다.
로드존슨이 책을 출간한 직후 엄청난 반향을 일으켰고, 유겐 휠러와 얀 카로프가 로드존슨에게 책의 예제를 기반으로 오픈소스 프로젝트를 제안하여 마침내 2003년 스프링 프레임 워크 1.0이 오픈소스로 출시하게 되며 스프링이 등장하게된다.</p>

<hr />

<h2 id="스프링의-정의">스프링의 정의</h2>
<p><img src="./assets/img/posts/20220621/spring-logo2.png" alt="Spring" title="Spring" />
일반적으로 라이브러리나 프레임워크는 특정 분야나 한가지 기술에 특화된 목표로 만들어진다. 그러나 스프링은 등장배경에서 확인한것처럼 J2EE와 EJB의 대안으로 등장하였으며 애플리케이션의 전영역을 관통하는 일관된 프로그래밍 모델과 핵심기술을 바탕으로 빠르고 효과적으로 애플리케이션을 개발할수 있는 ‘애플리케이션 프레임워크’라는 특징을 가진다. 즉, 스프링은 특정 계층이나 기술, 업무 분야에 국한되지 않고 애플리케이션의 전 영역을 포괄하는 범용적인 프레임워크이며, 또한 자바 기반의 프레임워크이기 때문에 좋은 객체 지향 애플리케이션을 개발할 수 있는 프레임워크이다.</p>

<hr />

<h2 id="spring-특징">Spring 특징</h2>
<ul>
  <li>경량 프레임워크
    <blockquote>
      <p>스프링은 EJB에 비해 가볍다. EJB는 기술에대한 과도한 욕심으로 너무 무겁고 복잡했으며 고가의 느리고 무거운 WAS가 필요했다. 그에 반해 스프링은 가장 단순한 서버환경인 톰캣이나 제티에서도 완벽하게 동작하며, 서블릿 컨테이너만으로 EJB의 지원하는 대부분의 기능은 물론 다른 고급기능들도 세련된 방식으로 사용할 수 있다.</p>
    </blockquote>
  </li>
  <li>오픈소스
    <blockquote>
      <p>스프링은 오픈소스다. 오픈소스는 분명 단점이 존재하지만, 스프링은 자바진영의 절대적 지지를 받았고 오픈소스의 한계를 극복하기 위해 스프링을 개발 유지 보수하는 전문 기업 ‘스프링 소스’가 세워졌다. 이후 09년 세계적인 IT기업 VMWare에 합병되어 안정적인 오픈소스 스프링 개발을 이어가고있다.</p>
    </blockquote>
  </li>
  <li>제어의 반전(loC)
    <blockquote>
      <p>제어권이 사용자가 아니라 프레임워크에 있어 필요에 따라 스프링에서 사용자 코드 호출</p>
    </blockquote>
  </li>
  <li>의존성 주입(DI)
    <blockquote>
      <p>각각의 계층이나 서비스들 간에 의존성이 존재할 경우 프레임워크가 서로 연결시켜준다.</p>
    </blockquote>
  </li>
  <li>
    <ul>
      <li>*</li>
    </ul>
  </li>
</ul>

<h2 id="spring-생태계">Spring 생태계</h2>
<p>Spring은 Framework와 함께 다양한 도구와 솔루션을 제공하여 속도, 단순성, 생산성에 초점을 맞추는 프로그래밍을 돕는다.
<img src="./assets/img/posts/20220621/spring-ecosystem.png" alt="Spring Ecosystem" title="Spring Ecosystem" /></p>
<div style="color: gray; text-align: center;">Spring Ecosystem</div>

<hr />

<h2 id="spring의-목표">Spring의 목표</h2>
<p>스프링에서 사용되는 수많은 기술들은 결국 근본적으로 기술적 코드와 비즈니스코드를 분리하고 좋은 객체지향 설계와 프로그래밍을 위함이다.
그리고 이 둘은 하나로 유기적으로 연결된다.
기술적 코드에 침범당하지 않는 비즈니스 로직은 객체지향 분석과 설계에서 나온 도메인 모델을 쉽게 적용할 수 있고, 상속과 다형성, 위임을 포함해서 많은 객체지향 디자인 패턴과 설계기법들이 잘 녹아들게 할 수 있다.
이 모든것들은 개발을 보다 쉽고 즐겁게 만들고, 유지보수에 강하며 확장이 유연한 어플리케이션을 개발 가능케 한다.</p>

<hr />

<p>읽어주셔서 감사합니다. 😊</p>

<p>참고:<br />
<a href="https://www.jiniaslog.co.kr/article/view?articleId=356">스프링의 등장 배경과 정의, 스프링이란 무엇인가? - Jinia’s LOG</a></p>
:ET